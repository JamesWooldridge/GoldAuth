<?php if ( ! defined('BASEPATH')) exit('No direct script access allowed');
require 'password.php';
/**
 *	Gold Auth Model
 *	@version: 0.1
 *	@author: James Wooldridge [james.wooldridgesc@gmail.com]
 *	@since: 22/12/14
 *
 *	Description: An authentication and RBAC library for the CodeIgniter framework
 */

class Gold_auth_model extends CI_Model {

	/* === Public variables === */
	public $tables = array();					// An array of the DB tables used
	public $identity;							// Table column used for login

	/* === Protected variables === */
	protected $salt_length;						// The length of the salts to generate
	protected $hash_cost;						// Cost of hashing

	protected $errors = array();				// Errors generated by the system
	protected $messages = array();				// Messages generated by the system
	protected $message_start_delimiter;
	protected $message_end_delimiter;
	protected $error_start_delimiter;
	protected $error_end_delimiter;

	protected $min_pass_length;
	protected $max_pass_length;

	function __construct() {
    	parent::__construct();
    	$this->config->load('gold_auth', TRUE);					// Load the config file
    	$this->lang->load('gold_auth');							// Load the lang file
    	$this->load->helper('cookie');							// Load the cookie helper

    	/* Set variables from config file */
    	$this->tables = $this->config->item('tables', 'gold_auth');				// Get the tables to use
    	$this->identity = $this->config->item('identity', 'gold_auth');			// Get the identity to use

    	/* Initialise salt & hash options
    	 * NOTE: salt options are currently not in use due to password_hash (> 5.5) computing salts automatically 
    	 */
    	$this->salt_length = $this->config->item('salt_length', 'gold_auth');	// Get the salt length to use
    	if($this->salt_length < 22) {
    		$this->salt_length = 22;											// Set to minimum of 22
    	}
    	$this->hash_cost = $this->config->item('hash_cost', 'gold_auth');		// Get the hash cost to use

    	$this->min_pass_length = $this->config->item('min_password_length', 'gold_auth');
    	$this->max_pass_length = $this->config->item('max_password_length', 'gold_auth');

    	/* Initialise error & message styling */
		$this->message_start_delimiter = $this->config->item('message_start_delimiter', 'gold_auth');
		$this->message_end_delimiter = $this->config->item('message_end_delimiter', 'gold_auth');
		$this->error_start_delimiter = $this->config->item('error_start_delimiter', 'gold_auth');
		$this->error_end_delimiter = $this->config->item('error_end_delimiter', 'gold_auth');
  	}

  	/* ========= Hashing & Salting ======== */

	/** 
	 *	Hashes the given password using bcrypt (to limit pass to 60 char for database)
	 *	Using the salt generated by the password_hash function
	 *
	 *	@param $password:	  The password to hash
	 * 	@return:			  The hashed password
	 */
	public function hash_password($password) {
		$options = array (											// Set options for hashing - cost
		    'cost' => $this->hash_cost
		);
		return password_hash($password, PASSWORD_BCRYPT);			// Hash and return the password
	}

	/**
	 *	Verifies the given password against the password stored against the given user id
	 *
	 *	@param $id:				id of the account
	 *	@param $given_pass:		the given password to verify
	 *
	 *	@return:				boolean
	 */
	public function verify_password($id, $given_pass) {
		$this->db->select('password');
		$this->db->where('id', $id);
		$this->db->limit(1);
		$result = $this->db->get($this->tables['users']);					// Get the salt and password for the given id 

		if($result->num_rows() !== 1) {
			return FALSE;													// More than one result returned, return false
		}

		$result = $result->row();

		return password_verify($given_pass, $result->password);				// Verify and return the result
	}

	/* ========= User Registration ======== */

	/**
	 *	Registers a new user in the system
	 *		Ensures that the given identity field is unique
	 *		Assigns the given roles to the user after account is created
	 *
	 *	@return:	boolean indicating success
	 */
	public function register($username, $email, $password, $emp_id, $roles = null) {		
		/* Run check on identity fields to ensure it is unique */
		if($this->identity == 'email' && $this->check_email($email)) {
			$this->set_error('acc_creation_duplicate_email');
			return FALSE;
		} else if($this->identity == 'username' && $this->check_username($username)) {
			$this->set_error('acc_creation_duplicate_username');
			return FALSE;
		} else if($emp_id > 0 && $this->check_emp_id($emp_id)) {
			$this->set_error('acc_creation_duplicate_emp_id');
			return FALSE;
		}

		/* Check the length of the password against the config file */
		if(strlen($password) < $this->min_pass_length) {
			$this->set_error('acc_creation_min_pass');
			return FALSE;
		} else if(strlen($password) > $this->max_pass_length) {
			$this->set_error('acc_creation_mx_pass');
			return FALSE;
		}

		/* Got past checks, now salt and hash the password */
		$password = $this->hash_password($password);

		/* Get the data ready to put in the table */
		$data = array (
			'username' 		=>	$username,
			'password'		=>	$password,
			'email'			=> 	$email,
			'created_on'	=> 	time(),
			'last_login'	=> 	time(),
			'active'		=>	1,
			'emp_id'		=> 	$emp_id,
			'date_modified' =>	time()
		);

		/* Insert the data into the database */
		$this->db->insert($this->tables['users'], $data);						// Insert into database
		$id = $this->db->insert_id();											// Get id of last insert

		/* Check if insert was successful, and set up roles if it was */
		if(isset($id)) {
			if(isset($roles)) {													// Do we have any roles to add
				foreach($roles as $role) {
					if($this->check_role($role)) {								// Make sure the role exists
						$this->add_to_role($role, $id);							// Add them to the role
					}
				}
			} else {															// Otherwise, just use the default role
				$default_role = $this->config->item('default_role', 'gold_auth');
				$this->add_to_role($default_role, $id);
			}
			return $id;															// Done creating account, return user id
		} else {
			return FALSE;
		}
	}

	/** 
	 *	Edits the given user with the given data
	 *
	 *	@param $user_id:		The ID of the user to edit
	 *	@param $data:			An associative array containing the data to be used in the update query.
	 *							Mapping: DB Field Name => New Value
	 */
	public function edit_user($user_id, $data) {
		$this->db->update($this->tables['users'], $data, array('id' => $user_id));				// Update the record
		if($this->db->affected_rows() > 0) {
			$this->set_message('user_update_successful');										// Return true and set success message
			return TRUE;
		} else {
			$this->set_error('user_update_unsuccessful');										// Return false and set error message
			return FALSE;	
		}
	}

	/**
	 *	Deletes a user
	 *
	 *	@param $id:		The ID of the user to delete
	 */
	public function delete_user($id) {
		$this->db->delete($this->tables['users'], array('id' => $id));
		$this->db->delete($this->tables['user_roles'], array('id' => $id));
		if($this->db->affected_rows() > 0) {
			$this->set_message('del_user_successful');
			return TRUE;
		} else {
			$this->set_error('del_user_unsuccessful');
			return FALSE;
		}	
	}

	/** 
	 *	Generates a random string of characters at min_pass_length length
	 */
	public function generate_password() {
		return substr(substr(str_shuffle("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"), 0, 1).substr(md5(time()),1), 0, $this->min_pass_length);
	}

	/**
	 *	Resets the password of the given user
	 *
	 *	@param $id:		The ID of the user
	 */
	public function reset_password($id) {
		$password = $this->generate_password();
		$data = array(
			'password' => $this->hash_password($password)
		);

		$this->db->update($this->tables['users'], $data, array('id' => $id));
		if($this->db->affected_rows() > 0) {
			$this->set_message('pass_reset_successful');
			return $password;
		} else {
			$this->set_error('pass_reset_unsuccessful');
			return FALSE;
		}	
	}

	/**
	 *	Changes the password of the given user
	 *
	 *	@param $id:			The ID of the user
	 *	@param $password:	The new password
	 */
	public function change_password($id, $password) {
		/* Check the length of the password against the config file */
		if(strlen($password) < $this->min_pass_length) {
			$this->set_error('acc_creation_min_pass');
			return FALSE;
		} else if(strlen($password) > $this->max_pass_length) {
			$this->set_error('acc_creation_max_pass');
			return FALSE;
		}

		/* Got past checks, now salt and hash the password */
		$password = $this->hash_password($password);

		/* Prepare to put it in the database */
		$data = array(
			'password'	=>	$password
		);

		$this->db->update($this->tables['users'], $data, array('id' => $id));
		if($this->db->affected_rows() > 0) {
			$this->set_message('pass_change_successful');
			return $password;
		} else {
			$this->set_error('pass_change_unsuccessful');
			return FALSE;
		}
	}

	/* ========= Login & Jazz ======== */

	/**
	 *	Logs in a user using the given credentials
	 *	Has the option to remember the user for future auto-login. Turned off by default
	 */
	public function login($identity, $password, $remember = FALSE) {
		$this->db->select($this->identity . ', username, email, id, active, last_login');
		$this->db->where($this->identity, $this->db->escape_str($identity));
		$this->db->limit(1);
		$query = $this->db->get($this->tables['users']);						// Get the credentials from the database for the given identity
		
		if($query->num_rows() === 1) {											// Check that we actually got results
			$cred = $query->row();												// Get the users credentials
			if($cred->active == 0) {											// Check that the user has an active account
				$this->set_error('login_unsuccessful_not_active');
				return FALSE;
			} else {
				if($this->verify_password($cred->id, $password)) {				// Verify the password
					$this->set_message('login_successful');						// Password was correct, set success message

					$this->set_session_data($cred);													// Set the session data
					$this->update_last_login($cred->id);											// Update the users' last login time
					$this->set_log_flag(1, $cred->id);												// Set the logged in flag
					if($remember && $this->config->item('remember_users', 'gold_auth')) {			// Check if we need to remember the user (and if we're allowed to from config)
						$this->remember_user($cred->id);
					}
					return TRUE;
				}
			}
		}

		sleep(2);													// Sleep a bit to prevent repeated attempt attacks

		$this->set_error('login_unsuccessful');
		return FALSE;												// Didn't work, return false
	}

	/**
	 *	Generates a list of currently logged in users
	 */	
	public function get_logged_in_users() {
		$this->db->where(array('logged_in' => 1));
		return $this->db->get($this->tables['users'])->result_array();
	}

	/**
	 *	Uses cookies to log in a remembered user
	 */
	public function login_remembered_user() {
		/* Check if the cookies are set */
		if(!get_cookie('identity') || !get_cookie('remember_code') || !$this->check_identity(get_cookie('identity'))) {
			$this->set_error('login_unsuccessful');
			return FALSE;											// Return false if they are not set
		}

		$identity = get_cookie('identity');							// Get the identity cookie
		$rem_code = get_cookie('remember_code');					// Get the remember code

		/* Check for the identity and remember code in the database */
		$this->db->where($this->identity, $identity);
		$this->db->where('remember_code', $rem_code);
		$this->db->limit(1);
		$result = $this->db->get($this->tables['users']);

		/* Check if we got a result */
		if($result->num_rows() == 1) {
			$cred = $result->row();

			$this->update_last_login($cred->id);							// Update the last login time to now
			$this->set_session($cred);										// Set up the users session

			if($this->config->item('extend_remember', 'gold_auth')) {		// Check if we need to extend the remember period
				$this->remember_user($cred->id);
			}

			$this->set_message('login_successful');
			return TRUE;	
		}

		$this->set_error('login_unsuccessful');
		return FALSE;	
	}

	/**
	 *	Sets cookies for the given user for future auto-login
	 */
	public function remember_user($id) {
		$user = $this->get_user($id);			// Get the details for the user

		$rem_code = sha1($user->password);		// Generate a remember code based on their password

		$data = array(							// Prep the data for update
			'remember_code' => $rem_code
		);

		$this->db->update($this->tables['users'], $data, array('id' => $id));		// Add the code to their record in the database

		if($this->db->affected_rows() > 0) {
			if($this->config->item('user_expire', 'gold_auth') === 0) {				// No expire set, use a default of a year
				$expire = (60 * 60 * 24 * 365);
			} else {																// Else use the given expiration time
				$expire = $this->config->item('user_expire', 'gold_auth');
			}

			/* Now set the cookies to be used for auto-login */
			set_cookie(array(
				'name' 		=> 	'identity',
				'value' 	=>	$this->identity,								// Used to get the user details on autologin
				'expire'	=>	$expire
			));

			set_cookie(array(
				'name' 		=> 	'remember_code',
				'value' 	=>	$rem_code,											// Used to check that everything is still legit
				'expire'	=>	$expire
			));



			$this->set_message('remember_user_successful');
			return TRUE;
		} else {
			$this->set_error('remember_user_unsuccessful');
			return FALSE;
		}
	}

	/**
	 *	Sets up a session for the given user id
	 */
	public function set_session_data($user) {
		$data = array(											// Set up the session data
			'identity'             => $this->identity,
		    'username'             => $user->username,
		    'email'                => $user->email,
		    'user_id'              => $user->id, 
		    'old_last_login'       => $user->last_login
		);
		$this->session->set_userdata($data);			// Set the session
		return TRUE;
	}

	/**
	 *	Updates the login time for the given account
	 *
	 *	@param $id:		the id of the account to update
	 */
	public function update_last_login($id) {
		$data = array(																	// Prep the data
			'last_login' => time()
		);
		$this->db->update($this->tables['users'], $data, array('id' => $id));			// Update the login time
		return ($this->db->affected_rows() > 0) ? TRUE : FALSE;							// Return true if successful
	}

	/**
	 *	Sets the logged in flag of the given users
	 */
	public function set_log_flag($flag, $id) {
		$data = array(
			'logged_in'	=>	$flag
		);
		$this->db->update($this->tables['users'], $data, array('id' => $id));			// Update the login time
		return ($this->db->affected_rows() > 0) ? TRUE : FALSE;							// Return true if successful
	}

	/**
	 *	Returns the details of a user for either a given id, or the currently logged in user
	 */
	public function get_user($id = null) {
		$id || $id = $this->session->userdata('user_id');

		$this->db->limit(1);
		$this->db->where('id', $id);
		$result = $this->db->get($this->tables['users']);

		return ($result->num_rows() === 1) ? $result->row() : FALSE;
	}

	/**
	 *	Returns an array of all users
	 */
	public function get_all_users() {
		$result = $this->db->get($this->tables['users']);
		return $result->result_array();
	}

	/* ========= Permission & Role Manipulation ======== */

	/**
	 *	Adds the given user to the given role
	 *
	 *	@param $role:	The role to add the user to
	 *	@param $id:		The id of the user
	 */
	public function add_to_role($role, $id) {
		/* Add the user id and the role id to the user_roles table */
		$data = array (
			'role_id'	=>	$role,
			'user_id'	=>	$id
		);
		$this->db->insert($this->tables['user_roles'], $data);		// Insert into the database
		return ($this->db->affected_rows() > 0) ? TRUE : FALSE;		// Return true if successful
	}

	/**
	 *	Removes the given user from the given role
	 *
	 *	@param $role:	The role to remove the user from
	 *	@param $id:		The id of the user
	 */
	public function remove_from_role($role, $id) {
		$this->db->delete($this->tables['user_roles'], array('role_id' => $role, 'user_id' => $id));
		return ($this->db->affected_rows() > 0) ? TRUE : FALSE;		// Return true if successful
	}

	/**
	 *	Returns an array of roles from the database
	 */
	public function get_roles() {
		$query = $this->db->get($this->tables['roles']);				// Get all from the database
		return ($query->num_rows > 0) ? $query->result_array() : FALSE;		// Return the array, or false if empty
	}

	/**
	 *	Returns the given roles permissions
	 *
	 *	@param $id:		The ID of the role to get
	 */
	public function get_role($id) {
		$this->db->join($this->tables['role_permissions'], $this->tables['role_permissions'] . '.role_id = ' . $this->tables['roles'] . '.role_id');
		$this->db->join($this->tables['permissions'], $this->tables['permissions'] . '.perm_id = ' . $this->tables['role_permissions'] . '.perm_id');
		return $this->db->get_where($this->tables['roles'], array($this->tables['roles'] . '.role_id' => $id))->result_array();
	}

	public function get_role_id($name) {
		$result = $this->db->get_where($this->tables['roles'], array('role_name' => $name))->row_array();
		return $result['role_id'];
	}

	/** 
	 *	Adds the given permission to the given role
	 *
	 *	@param $role:	The ID of the role
	 *	@param $perm:	The ID of the permission
	 */
	public function add_permission_to_role($role, $perm) {
		$perms = $this->get_role($role);									// First get the permissions of the role to check if it is already there
		foreach($perms as $r_perm) {
			if($r_perm['perm_id'] == $perm) {
				return FALSE;
			}
		}

		$data = array(
			'role_id'	=>	$role,
			'perm_id'	=>	$perm
		);

		$this->db->insert($this->tables['role_permissions'], $data);
		return ($this->db->affected_rows() > 0) ? TRUE : FALSE;		// Return true if successful
	}

	/** 
	 *	Removes the given permission from the given role
	 *
	 *	@param $role:	The ID of the role
	 *	@param $perm:	The ID of the permission
	 */
	public function remove_permission_from_role($role, $perm) {
		$this->db->delete($this->tables['role_permissions'], array(
			'role_id'	=>	$role,
			'perm_id'	=>	$perm
		));
		return ($this->db->affected_rows() > 0) ? TRUE : FALSE;		// Return true if successful
	}

	/**
	 *	Checks if the given role exists in the databae
	 *
	 * 	@param $role:	The role to check
	 *	@return: boolean
	 */
	public function check_role($role) {
		$result = $this->db->where('role_id', $role);
		return $result->count_all_results($this->tables['roles']) > 0;
	}

	/**
	 *	Creates a role that users can be assigned to
	 *
	 *	@param $name:	The name of the role
	 *	@param $desc:	A description of the role
	 */
	public function create_role($name, $desc) {
		/* Check if the role is already in the database */
		$existing = $this->db->get_where($this->tables['roles'], array('name' => $name))->num_rows();
		if($existing !== 0) {
			$this->set_error('role_creation_duplicate_name');
			return FALSE;
		}
		$data = array(											// Prep the data to put in the database
			'name'	=> $name,
			'desc'	=> $desc
		);
		$this->db->insert($this->tables['roles'], $data);		// Insert the data into the database
		$id = $this->db->insert_id();							// Get the insert id
		if($id) {
			$this->set_message('role_creation_successful');		// Set success message
			return $id;
		} else {
			$this->set->error('role_creation_unsuccessful');	// Set error message
			return FALSE;
		}
	}

	/**
	 *	Checks whether the given user is in the given role
	 *
	 *	@param $name:	Name of the role
	 *	@param $id:		ID of the user
	 */
	public function in_role($name, $id) {
		$this->db->from($this->tables['user_roles']);
		$this->db->join($this->tables['roles'], $this->tables['roles'] . '.role_id = ' . $this->tables['user_roles'] . '.role_id');
		$this->db->where('role_name', $name);
		$this->db->where('user_id', $id);
		$result = $this->db->get();

		if($result->num_rows() < 1) {
			return FALSE;
		} else {
			return TRUE;
		}
	}

	/**
	 *	Returns an array of all roles that the given user belongs to
	 */
	public function get_user_roles($id) {
		$this->db->join('roles', "{$this->tables['roles']}.role_id = {$this->tables['user_roles']}.role_id");
		$result = $this->db->get_where($this->tables['user_roles'], array('user_id' => $id));
		return $result->result_array();
	}

	/**
	 *	Returns an array of all permissions
	 */
	public function get_permissions($where = null) {
		if($where) {
			$this->db->where($where);
		}
		$query = $this->db->get($this->tables['permissions']);				// Get all from the database
		return ($query->num_rows > 0) ? $query->result_array() : FALSE;		// Return the array, or false if empty
	}

	/**
	 *	Returns the permission id given a permission sname
	 */
	public function get_permission_name($name) {
		$this->db->select('perm_id');
		$this->db->where('perm_name', $name);
		$result = $this->db->get($this->tables['permissions']);

		if($result->num_rows() > 0) {
			$row = $result->row();
			return $row->perm_id;
		} else {
			return FALSE;
		}
	}

	/**
	 *	Returns an array of all users belonging to the given role
	 */
	public function get_role_users($role) {
		$this->db->join('roles', "{$this->tables['roles']}.role_id = {$this->tables['user_roles']}.role_id");

		$this->db->where(array(
			'role_name'	=>	$role
		));

		return $this->db->get('user_roles')->result_array();
	}

	/* ========= Action checks - Check whether the user can perform certain action ======== */

	/**
	 *	Checks whether the user can perform the given action 
	 *	Note: admins can do everything
	 *
	 *	@param $action:		The name of the action (permission_name)
	 */
	public function can($action) {
		$id = $this->get_user();
		$id = $id->id;

		if($this->is_admin()) {
			return TRUE;
		}

		$roles = $this->get_user_roles($id);						// Get the roles the user belongs to
		$action = $this->get_permission_name($action);				// Get the action id
		foreach($roles as $role) {
			$role_id = $role['role_id'];							// Get the role id
			$this->db->where('role_id', $role_id);
			$this->db->where('perm_id', $action);
			$result = $this->db->get($this->tables['role_permissions']);
			if($result->num_rows() >= 1) {
				return TRUE;
			}
		} 
		return FALSE;
	}

	/**
	 *	Checks if the user is an admin
	 */
	public function is_admin($redirect = false) {
		$id = $this->get_user();
		$id = $id->id;

		$roles = $this->get_user_roles($id);
		foreach($roles as $role) {
			if($role['role_name'] == 'admin') {
				return TRUE;
			}
		}
		if($redirect) {
			redirect('auth/permission_denied', 'refresh');
		} else {
			return FALSE;
		}
	}

	/**
	 *	Records an action made by a user in the database
	 *	'User' is the currently logged in user
	 *
	 * 	@param $table_used:		The name of a table in the database that is relevant to the action
	 * 	@param $table_id:		The ID of the record in table_used that is relevant to the action
	 * 	@param $action:			A description of the action performed. This correlates to the actions in the permissions table
	 *	@param $details:		Extra details regarding the action performed
	 */
	public function record_action($table_used, $table_id, $action, $details = null) {
		$user = $this->get_user();												// Get the currently logged in user
		$data = array(															// Set up the array of data to put into the DB
			'user_id'		=>	$user->id,
			'table_used'	=>	$table_used,
			'table_id'		=>	$table_id,
			'action'		=>	$action,
			'details'		=>	$details,
			'timestamp'		=>	time()
		);

		$this->db->insert($this->tables['actions'], $data);						// Insert the data into the table

		return $this->db->affected_rows() > 0 ? TRUE : FALSE;             		// Return true if successful
	}

	/* ========= Various field checks - Mainly used in user registration ======== */

	/**
	 *	Checks if the given identity exists in the databae
	 *
	 * 	@param $identity:	The identity to check
	 *	@return: boolean
	 */
	private function check_identity($identity) {
		$result = $this->db->where($this->identity, $identity);
		return $result->count_all_results($this->tables['users']) > 0;
	}

	/**
	 *	Checks if the given email exists in the databae
	 *
	 * 	@param $email:	The email to check
	 *	@return: boolean
	 */
	private function check_email($email) {
		$result = $this->db->where('email', $email);
		return $result->count_all_results($this->tables['users']) > 0;
	}

	/**
	 *	Checks if the given username exists in the databae
	 *
	 * 	@param $username:	The username to check
	 *	@return: boolean
	 */
	public function check_username($username) {
		$result = $this->db->where('username', $username);
		return $result->count_all_results($this->tables['users']) > 0;
	}

	/**
	 *	Checks if the given emp_id exists in the databae
	 *
	 * 	@param $role:	The emp_id to check
	 *	@return: boolean
	 */
	public function check_emp_id($emp_id) {
		$result = $this->db->where('emp_id', $emp_id);
		return $result->count_all_results($this->tables['users']) > 0;
	}

	/* ========= Message & Error Management ======== */

	/** 
	 *	Sets a message (adds to the array of messages)
	 *
	 *	@param $message:	The message to add
	 */
	public function set_message($message) {
		$this->messages[] = $message;
		return $message;
	}

	/**
	 *	Retrieves the last message
	 */
	public function get_last_message() {
		$message = end($this->messages);
		$output = $this->message_start_delimiter;
		$output .= $this->lang->line($message);
		$output .= $this->message_end_delimiter;
		return $output;
	}

	/**
	 *	Retrieves the entire array of messages
	 */
	public function get_messages() {
		$output = $this->message_start_delimiter ;
		foreach($this->messages as $message) {
			$messageLang = $this->lang->line($message);
			$output .= $messageLang . '<br />';
		}
		$output .= $this->message_end_delimiter;
		return $output;
	}

	/** 
	 *	Sets an error message (adds to the array of error messages)
	 *
	 *	@param $error:	The error message to add
	 */
	public function set_error($error) {
		$this->errors[] = $error;
		return $error;
	}

	/**
	 *	Retrieves the last errror message
	 */
	public function get_last_error() {
		$error = end($this->errors);
		$output = $this->error_start_delimiter;
		$output .= $this->lang->line($error);
		$output .= $this->error_end_delimiter;
		return $output;
	}

	/**
	 *	Returns a string of error messages
	 */
	public function get_errors() {
		$output = $this->error_start_delimiter ;
		foreach($this->errors as $error) {
			$errorLang = $this->lang->line($error);
			$output .= $errorLang . '<br />';
		}
		$output .= $this->error_end_delimiter;
		return $output;
	}
}

?>
